---
- name: Pull full nginx configuration from source hosts
  hosts: haproxy          # ← замените при необходимости
  become: yes
  gather_facts: no

  vars:
    # Где хранить выгрузку на КОНТРОЛЛЕРЕ
    artifacts_dir: "{{ lookup('env','HOME') }}/.artifacts/nginx/{{ inventory_hostname }}"
    archive_path: "/tmp/nginx-config-{{ inventory_hostname }}.tar.gz"

    # Что архивируем на УДАЛЁННОМ хосте
    nginx_paths_to_archive:
      - /etc/nginx/nginx.conf
      - /etc/nginx/conf.d
      - /etc/nginx/sites-available
      - /etc/nginx/sites-enabled
      - /etc/nginx/snippets
      - /etc/nginx/streams-available
      - /etc/nginx/streams-enabled
      # - /etc/letsencrypt   # осторожно: приватные ключи. Обычно НЕ тащим в git.

    nginx_exclusion_patterns:
      - "*.tmp"
      - "*.swp"
      - "**/*.bak"
      - "**/README*"

  tasks:
    - name: Ensure remote archive is absent
      ansible.builtin.file:
        path: "{{ archive_path }}"
        state: absent

    - name: Create archive of nginx configuration on remote host
      ansible.builtin.archive:
        path: "{{ nginx_paths_to_archive }}"
        dest: "{{ archive_path }}"
        format: gz
        exclusion_patterns: "{{ nginx_exclusion_patterns }}"

    - name: Ensure local artifacts dir exists
      delegate_to: localhost
      become: false
      ansible.builtin.file:
        path: "{{ artifacts_dir }}"
        state: directory
        mode: "0775"

    - name: Fetch archive to controller
      ansible.builtin.fetch:
        src: "{{ archive_path }}"
        dest: "{{ artifacts_dir }}/"
        flat: yes

    - name: Remove remote archive
      ansible.builtin.file:
        path: "{{ archive_path }}"
        state: absent

    - name: Unpack archive locally
      delegate_to: localhost
      become: false
      ansible.builtin.unarchive:
        src: "{{ artifacts_dir }}/nginx-config-{{ inventory_hostname }}.tar.gz"
        dest: "{{ artifacts_dir }}/"
        remote_src: false

# ------------------------------------------------------------------

- name: Stage configs into role templates and rename to .j2
  hosts: localhost
  gather_facts: no

  vars:
    source_host_name: "vm-master"   # ← укажите явно нужный хост
    artifacts_dir: "{{ lookup('env','HOME') }}/.artifacts/nginx/{{ source_host_name }}"
    source_root: "{{ artifacts_dir }}"

    role_name: nginx
    role_root: "{{ playbook_dir }}/roles/{{ role_name }}"
    role_templates: "{{ role_root }}/templates"

  tasks:
    - name: Ensure source root exists
      stat:
        path: "{{ source_root }}"
      register: src
    - fail:
        msg: "Source dump not found: {{ source_root }}"
      when: not src.stat.exists

    - name: Ensure role directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ role_root }}/defaults"
        - "{{ role_root }}/handlers"
        - "{{ role_root }}/tasks"
        - "{{ role_templates }}"
        - "{{ role_templates }}/sites-available"
        - "{{ role_templates }}/sites-enabled"
        - "{{ role_templates }}/snippets"

    - name: Copy nginx.conf -> templates/nginx.conf.j2
      copy:
        src: "{{ source_root }}/nginx.conf"
        dest: "{{ role_templates }}/nginx.conf.j2"
        mode: "0644"
      when: (source_root + '/nginx.conf') is file

    - name: Sync dirs
      vars:
        dirs_to_template:
          - { src: "{{ source_root }}/sites-available", dest: "{{ role_templates }}/sites-available" }
          - { src: "{{ source_root }}/sites-enabled",  dest: "{{ role_templates }}/sites-enabled"  }
          - { src: "{{ source_root }}/snippets",       dest: "{{ role_templates }}/snippets"       }
      ansible.posix.synchronize:
        mode: push
        src: "{{ item.src }}/"
        dest: "{{ item.dest }}/"
        archive: yes
        delete: no
      loop: "{{ dirs_to_template }}"
      when: item.src is directory

    - name: Find *.conf
      find:
        paths:
          - "{{ role_templates }}/sites-available"
          - "{{ role_templates }}/sites-enabled"
          - "{{ role_templates }}/snippets"
        patterns: "*.conf"
        file_type: file
        recurse: true
      register: confs

    - name: Rename *.conf -> *.conf.j2
      command: mv "{{ item.path }}" "{{ item.path }}.j2"
      loop: "{{ confs.files }}"
      changed_when: true
